var search_data = {"index":{"searchIndex":["allmanager","group","groupmanager","object","proc","req","reqtuple","requiremanager","resource","string","task","taskmanager","test_wcbt","wcbt","a()","b()","bw()","db()","g()","l()","npb()","z()","all_data_clear()","check_outermost()","check_over_extime()","clone()","create_group_array()","create_require_array()","create_task_array()","create_tasks()","data_clear()","data_clear()","data_clear()","db()","get_rset_for_spin()","get_all_require()","get_all_require()","get_group_array()","get_group_from_group_id()","get_long_require_array()","get_random_group()","get_require_array()","get_require_time()","get_resource_count()","get_short_require_array()","get_task_array()","get_using_group_array()","ht()","load_group_data()","load_require_data()","load_task_data()","load_tasks()","msum()","new()","new()","new()","new()","new()","new()","new()","new()","new()","np()","out_alldata()","out_alldata()","out_alldata()","p()","print_debug()","prints()","resetting()","save_group_data()","save_require_data()","save_task_data()","save_tasks()","set_array()","set_blocktime()","set_garray()","setup()","spin()","test_z()","wget-log"],"longSearchIndex":["allmanager","group","groupmanager","object","proc","req","reqtuple","requiremanager","resource","string","task","taskmanager","test_wcbt","wcbt","wcbt#a()","wcbt#b()","wcbt#bw()","wcbt#db()","wcbt#g()","wcbt#l()","wcbt#npb()","wcbt#z()","allmanager#all_data_clear()","task#check_outermost()","task#check_over_extime()","req#clone()","groupmanager#create_group_array()","requiremanager#create_require_array()","taskmanager#create_task_array()","allmanager#create_tasks()","groupmanager#data_clear()","requiremanager#data_clear()","taskmanager#data_clear()","wcbt#db()","wcbt#get_rset_for_spin()","task#get_all_require()","taskmanager::get_all_require()","groupmanager#get_group_array()","groupmanager::get_group_from_group_id()","task#get_long_require_array()","groupmanager::get_random_group()","requiremanager#get_require_array()","task#get_require_time()","task#get_resource_count()","task#get_short_require_array()","taskmanager#get_task_array()","allmanager#get_using_group_array()","wcbt#ht()","groupmanager#load_group_data()","requiremanager#load_require_data()","taskmanager#load_task_data()","allmanager#load_tasks()","wcbt#msum()","allmanager::new()","group::new()","groupmanager::new()","req::new()","reqtuple::new()","requiremanager::new()","resource::new()","task::new()","taskmanager::new()","wcbt#np()","group#out_alldata()","req#out_alldata()","task#out_alldata()","wcbt#p()","object#print_debug()","reqtuple#prints()","task#resetting()","groupmanager#save_group_data()","requiremanager#save_require_data()","taskmanager#save_task_data()","allmanager#save_tasks()","taskmanager#set_array()","wcbt#set_blocktime()","requiremanager#set_garray()","test_wcbt#setup()","wcbt#spin()","test_wcbt#test_z()",""],"info":[["AllManager","","AllManager.html","",""],["Group","","Group.html","","<p>リソースグループのクラス\n"],["GroupManager","","GroupManager.html","","<p>グループマネージャークラスの定義\n"],["Object","","Object.html","",""],["Proc","","Proc.html","","<p>プロセッサクラス\n"],["Req","","Req.html","","<p>リソース要求クラス\n"],["ReqTuple","","ReqTuple.html","","<p>タプルクラス\n"],["RequireManager","","RequireManager.html","","<p>リソース要求マネージャーの定義\n"],["Resource","","Resource.html","","<p>リソース Resource(group)\n"],["String","","String.html","","<p>require “ruby-prof”\n"],["Task","","Task.html","","<p>タスククラス\n"],["TaskManager","","TaskManager.html","","<p>タスクマネージャークラスの定義\n"],["Test_wcbt","","Test_wcbt.html","",""],["WCBT","","WCBT.html","",""],["A","WCBT","WCBT.html#method-i-A","(task)","<p>Ti以外のタスクのジョブの集合 @param [TASK]  @return\n[Array&lt;TASK&gt;]\n"],["B","WCBT","WCBT.html#method-i-B","(task)","<p>周期がp(Ti)より長いTi以外のタスクのジョブの集合 @param\n[TASK]  @return [Array&lt;TASK&gt;] …\n"],["BW","WCBT","WCBT.html#method-i-BW","(t)",""],["DB","WCBT","WCBT.html#method-i-DB","(t)",""],["G","WCBT","WCBT.html#method-i-G","(t, g)","<p>Taのジョブのグループgに属するリソースl-outermost要求の集合\n"],["L","WCBT","WCBT.html#method-i-L","(task)","<p>Tiの任意のジョブから発行されるl-outermost要求の集合\n"],["NPB","WCBT","WCBT.html#method-i-NPB","(t)",""],["Z","WCBT","WCBT.html#method-i-Z","(task, g)","<p>グループgのリソースを要求を発行するジョブを持つTj以外のタスクの集合\n@param …\n"],["all_data_clear","AllManager","AllManager.html#method-i-all_data_clear","()","<p>全データ初期化\n"],["check_outermost","Task","Task.html#method-i-check_outermost","()","<p>outermostでない要求を探索して設定\n"],["check_over_extime","Task","Task.html#method-i-check_over_extime","()","<p>リソース要求時間が\nタスクの実行時間を超えていないかチェック\n"],["clone","Req","Req.html#method-i-clone","()","<p>Object.clone オーバーライド\n"],["create_group_array","GroupManager","GroupManager.html#method-i-create_group_array","(i)","<p>i個のグループを生成し，group_arrayとする\n"],["create_require_array","RequireManager","RequireManager.html#method-i-create_require_array","(i, info=[\"0\"])","<p>リソース要求配列の作成\n作成したリソース要求の数を返す\n"],["create_task_array","TaskManager","TaskManager.html#method-i-create_task_array","(i, info=[\"0\"])","<p>タスクの配列生成 生成したタスクの数を返す\n"],["create_tasks","AllManager","AllManager.html#method-i-create_tasks","(tcount=TASK_COUNT, rcount=REQ_COUNT, gcount=GRP_COUNT, info=[\"0\"])","<p>タスク生成\n"],["data_clear","GroupManager","GroupManager.html#method-i-data_clear","()","<p>内部データのクリア\n"],["data_clear","RequireManager","RequireManager.html#method-i-data_clear","()","<p>内部データのクリア\n"],["data_clear","TaskManager","TaskManager.html#method-i-data_clear","()","<p>内部データのクリア\n"],["db","WCBT","WCBT.html#method-i-db","(t, r)","<p>TijのR上のdirect blockの総時間\n"],["get_Rset_for_spin","WCBT","WCBT.html#method-i-get_Rset_for_spin","(job, g)","<p>job以外のジョブが発行するグループgへの要求の最大長のものの集合を求める\n…\n"],["get_all_require","Task","Task.html#method-i-get_all_require","()","<p>全てのグループロック要求の配列を取得\n@req_listはネストしているものは含まれていない …\n"],["get_all_require","TaskManager","TaskManager.html#method-c-get_all_require","()","<p>全タスクで使われているリソース要求の配列を返す\n"],["get_group_array","GroupManager","GroupManager.html#method-i-get_group_array","()","<p>group_arrayを返す\n"],["get_group_from_group_id","GroupManager","GroupManager.html#method-c-get_group_from_group_id","(group_id)","<p>group_idからグループのオブジェクトの参照を返す\n"],["get_long_require_array","Task","Task.html#method-i-get_long_require_array","()","<p>longリソースの配列を返す outermostなもののみ\nネストされているものも含む\n"],["get_random_group","GroupManager","GroupManager.html#method-c-get_random_group","()","<p>グループをランダムに返す\n"],["get_require_array","RequireManager","RequireManager.html#method-i-get_require_array","()","<p>require_arrayを返す\n"],["get_require_time","Task","Task.html#method-i-get_require_time","()","<p>総リソース要求時間を計算\n"],["get_resource_count","Task","Task.html#method-i-get_resource_count","()",""],["get_short_require_array","Task","Task.html#method-i-get_short_require_array","()","<p>shortリソース要求の配列を返す outermost なもののみ\nネストされているものもふくむ …\n"],["get_task_array","TaskManager","TaskManager.html#method-i-get_task_array","()","<p>task_arrayを返す\n"],["get_using_group_array","AllManager","AllManager.html#method-i-get_using_group_array","()","<p>システムで使用中のリソースグループの配列を取得\nrarrayはシステムで使用するリソース要求の配列 …\n"],["ht","WCBT","WCBT.html#method-i-ht","(ta, ra)","<p>グループgに属する長期リソース要求Raを行うタスクTaのジョブの保持時間\n"],["load_group_data","GroupManager","GroupManager.html#method-i-load_group_data","(filename=GRP_FILE_NAME)","<p>グループの読み込み(JSON)\n読み込んだグループ数を返す．失敗したらfalse\n"],["load_require_data","RequireManager","RequireManager.html#method-i-load_require_data","(filename=REQ_FILE_NAME)","<p>リソース要求の読み込み(JSON)\n読み込んだリソース要求の数を返す．失敗したらfalseを返す．\n…\n"],["load_task_data","TaskManager","TaskManager.html#method-i-load_task_data","(filename=TASK_FILE_NAME)","<p>JSONファイルから読み取って作成した(load_task_json_data)ハッシュから\nタスククラスを作成 …\n"],["load_tasks","AllManager","AllManager.html#method-i-load_tasks","(name)","<p>各要素の読み込み load_tasks(tname=TASK_FILE_NAME,\nrname=REQ_FILE_NAME, gname=GRP_FILE_NAME)\n"],["msum","WCBT","WCBT.html#method-i-msum","(n, s)","<p>集合sのmin(n, |s|)番目までの要素の和を返す関数 @param\n[Fixnum, Array] @return [Fixnum] …\n"],["new","AllManager","AllManager.html#method-c-new","()","<p>初期化\n"],["new","Group","Group.html#method-c-new","(group, kind)",""],["new","GroupManager","GroupManager.html#method-c-new","()",""],["new","Req","Req.html#method-c-new","(id, res, time, reqs, begintime=0, outermost=true)",""],["new","ReqTuple","ReqTuple.html#method-c-new","(req, k)",""],["new","RequireManager","RequireManager.html#method-c-new","()",""],["new","Resource","Resource.html#method-c-new","(res_id, group)",""],["new","Task","Task.html#method-c-new","(id, proc, period, extime, priority, offset, reqarray)",""],["new","TaskManager","TaskManager.html#method-c-new","()",""],["np","WCBT","WCBT.html#method-i-np","(job)","\n<pre>Tabがnon-preemptiveである可能性のある時間は　spin時間+CS長</pre>\n<p>　np(Tab) = max{ spin(Tab …\n"],["out_alldata","Group","Group.html#method-i-out_alldata","()","<p>グループのデータを返す JSON外部出力用\n"],["out_alldata","Req","Req.html#method-i-out_alldata","()","<p>リソース要求のデータを返す JSON外部出力用\n"],["out_alldata","Task","Task.html#method-i-out_alldata","()","<p>タスクのデータを返す JSON外部出力用\n"],["p","WCBT","WCBT.html#method-i-p","(-schedulability_check(k, i))","<p>スケジューラビリティチェック(FMLP-P) @param[Fixnum, Fixnum] k\n: プロセッサ，i : 割当てるタスク数 …\n"],["print_debug","Object","Object.html#method-i-print_debug","(str)",""],["prints","ReqTuple","ReqTuple.html#method-i-prints","()",""],["resetting","Task","Task.html#method-i-resetting","()",""],["save_group_data","GroupManager","GroupManager.html#method-i-save_group_data","(filename)","<p>グループの保存(JSON)\n"],["save_require_data","RequireManager","RequireManager.html#method-i-save_require_data","(filename)","<p>リソース要求の保存(JSON)\n"],["save_task_data","TaskManager","TaskManager.html#method-i-save_task_data","(filename)","<p>タスクの保存(JSON)\n保存したタスクの数を返す．失敗したらfalse\n"],["save_tasks","AllManager","AllManager.html#method-i-save_tasks","(name)","<p>各要素の書き込み ファイル名は必須\n"],["set_array","TaskManager","TaskManager.html#method-i-set_array","(rarray, garray)","<p>require_arrayとgroup_arrayをセットする\n"],["set_blocktime","WCBT","WCBT.html#method-i-set_blocktime","()","<p>ブロック時間を計算し，格納\n"],["set_garray","RequireManager","RequireManager.html#method-i-set_garray","(garray)","<p>group_arrayをセット\n"],["setup","Test_wcbt","Test_wcbt.html#method-i-setup","()",""],["spin","WCBT","WCBT.html#method-i-spin","(job, req)","<p>jobがreq発行から完了までにspinする時間 @param [Task, Require]\nreqs:はjob以外のジョブが発行したグループgに対する最長リソース要求の長さの集合\n…\n"],["test_Z","Test_wcbt","Test_wcbt.html#method-i-test_Z","()",""],["wget-log","","wget-log.html","",""]]}}